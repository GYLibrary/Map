////  SZListAnnotationView.swift//  SZMap////  Created by 吴三忠 on 2017/4/5.//  Copyright © 2017年 吴三忠. All rights reserved.//import UIKitimport MapKitprivate let kMapPinImage = UIImage(named: "mapPin")!private let kMapAnimationTime = 0.300class SZListAnnotationView: MKAnnotationView {    weak var customCalloutView: SZListDetailView?    override var annotation: MKAnnotation? {        willSet { customCalloutView?.removeFromSuperview() }    }        override init(annotation: MKAnnotation?, reuseIdentifier: String?) {        super.init(annotation: annotation, reuseIdentifier: reuseIdentifier)        self.canShowCallout = false        self.image = kMapPinImage    }        required init?(coder aDecoder: NSCoder) {        super.init(coder: aDecoder)        self.canShowCallout = false        self.image = kMapPinImage    }        override func setSelected(_ selected: Bool, animated: Bool) {        super.setSelected(selected, animated: animated)                if selected {            self.customCalloutView?.removeFromSuperview()            if let newCustomCalloutView = loadPersonDetailMapView() {                newCustomCalloutView.frame.origin.x -= (newCustomCalloutView.frame.width  - self.frame.width ) * 0.5                newCustomCalloutView.frame.origin.y -= newCustomCalloutView.frame.height                self.addSubview(newCustomCalloutView)                self.customCalloutView = newCustomCalloutView                if animated {                    self.customCalloutView!.alpha = 0.0                    UIView.animate(withDuration: kMapAnimationTime, animations: {                        self.customCalloutView!.alpha = 1.0                    })                }            }        } else {            if customCalloutView != nil {                if animated {                    UIView.animate(withDuration: kMapAnimationTime, animations: {                        self.customCalloutView!.alpha = 0.0                    }, completion: { (success) in                        self.customCalloutView!.removeFromSuperview()                    })                } else {                    self.customCalloutView!.removeFromSuperview()                }            }        }    }        func loadPersonDetailMapView() -> SZListDetailView? {                let listView = SZListDetailView.listDetailView()        listView.frame = CGRect(x: 0, y: 0, width: (superview?.bounds.size.width)! * 0.9, height: 100)        return listView    }    override func prepareForReuse() {        super.prepareForReuse()        self.customCalloutView?.removeFromSuperview()    }            override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {                if let parentHitView = super.hitTest(point, with: event) { return parentHitView }        else {            if customCalloutView != nil {                return customCalloutView!.hitTest(convert(point, to: customCalloutView!), with: event)            } else { return nil }        }    }}